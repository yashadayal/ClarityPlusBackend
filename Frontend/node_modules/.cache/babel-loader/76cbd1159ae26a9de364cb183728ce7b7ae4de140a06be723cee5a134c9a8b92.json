{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"onClick\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onMouseUp\", \"onPaste\", \"error\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTheme } from '@mui/material/styles';\nimport { useValidation } from '../validation/useValidation';\nimport { useUtils } from '../useUtils';\nimport { adjustSectionValue, isAndroid, cleanString, getSectionOrder } from './useField.utils';\nimport { useFieldState } from './useFieldState';\nimport { useFieldCharacterEditing } from './useFieldCharacterEditing';\nimport { getActiveElement } from '../../utils/utils';\nexport var useField = function useField(params) {\n  var utils = useUtils();\n  var _useFieldState = useFieldState(params),\n    state = _useFieldState.state,\n    selectedSectionIndexes = _useFieldState.selectedSectionIndexes,\n    _setSelectedSections = _useFieldState.setSelectedSections,\n    clearValue = _useFieldState.clearValue,\n    clearActiveSection = _useFieldState.clearActiveSection,\n    updateSectionValue = _useFieldState.updateSectionValue,\n    updateValueFromValueStr = _useFieldState.updateValueFromValueStr,\n    setTempAndroidValueStr = _useFieldState.setTempAndroidValueStr,\n    sectionsValueBoundaries = _useFieldState.sectionsValueBoundaries,\n    placeholder = _useFieldState.placeholder;\n  var _useFieldCharacterEdi = useFieldCharacterEditing({\n      sections: state.sections,\n      updateSectionValue: updateSectionValue,\n      sectionsValueBoundaries: sectionsValueBoundaries,\n      setTempAndroidValueStr: setTempAndroidValueStr\n    }),\n    applyCharacterEditing = _useFieldCharacterEdi.applyCharacterEditing,\n    resetCharacterQuery = _useFieldCharacterEdi.resetCharacterQuery;\n  var inputRefProp = params.inputRef,\n    internalProps = params.internalProps,\n    _params$internalProps = params.internalProps,\n    _params$internalProps2 = _params$internalProps.readOnly,\n    readOnly = _params$internalProps2 === void 0 ? false : _params$internalProps2,\n    unstableFieldRef = _params$internalProps.unstableFieldRef,\n    _params$forwardedProp = params.forwardedProps,\n    onClick = _params$forwardedProp.onClick,\n    onKeyDown = _params$forwardedProp.onKeyDown,\n    onFocus = _params$forwardedProp.onFocus,\n    onBlur = _params$forwardedProp.onBlur,\n    onMouseUp = _params$forwardedProp.onMouseUp,\n    onPaste = _params$forwardedProp.onPaste,\n    error = _params$forwardedProp.error,\n    fieldValueManager = params.fieldValueManager,\n    valueManager = params.valueManager,\n    validator = params.validator,\n    otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded);\n  var inputRef = React.useRef(null);\n  var handleRef = useForkRef(inputRefProp, inputRef);\n  var focusTimeoutRef = React.useRef(undefined);\n  var theme = useTheme();\n  var isRTL = theme.direction === 'rtl';\n  var sectionOrder = React.useMemo(function () {\n    return getSectionOrder(state.sections, isRTL);\n  }, [state.sections, isRTL]);\n  var syncSelectionFromDOM = function syncSelectionFromDOM() {\n    var _selectionStart;\n    if (readOnly) {\n      _setSelectedSections(null);\n      return;\n    }\n    var browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;\n    var nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n    : state.sections.findIndex(function (section) {\n      return section.startInInput - section.startSeparator.length > browserStartIndex;\n    });\n    var sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    _setSelectedSections(sectionIndex);\n  };\n  var handleInputClick = useEventCallback(function () {\n    onClick == null ? void 0 : onClick.apply(void 0, arguments);\n    syncSelectionFromDOM();\n  });\n  var handleInputMouseUp = useEventCallback(function (event) {\n    onMouseUp == null ? void 0 : onMouseUp(event);\n\n    // Without this, the browser will remove the selected when clicking inside an already-selected section.\n    event.preventDefault();\n  });\n  var handleInputFocus = useEventCallback(function () {\n    onFocus == null ? void 0 : onFocus.apply(void 0, arguments);\n    // The ref is guaranteed to be resolved at this point.\n    var input = inputRef.current;\n    clearTimeout(focusTimeoutRef.current);\n    focusTimeoutRef.current = setTimeout(function () {\n      // The ref changed, the component got remounted, the focus event is no longer relevant.\n      if (!input || input !== inputRef.current) {\n        return;\n      }\n      if (selectedSectionIndexes != null || readOnly) {\n        return;\n      }\n      if (\n      // avoid selecting all sections when focusing empty field without value\n      input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {\n        _setSelectedSections('all');\n      } else {\n        syncSelectionFromDOM();\n      }\n    });\n  });\n  var handleInputBlur = useEventCallback(function () {\n    onBlur == null ? void 0 : onBlur.apply(void 0, arguments);\n    _setSelectedSections(null);\n  });\n  var handleInputPaste = useEventCallback(function (event) {\n    onPaste == null ? void 0 : onPaste(event);\n    if (readOnly) {\n      event.preventDefault();\n      return;\n    }\n    var pastedValue = event.clipboardData.getData('text');\n    if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {\n      var activeSection = state.sections[selectedSectionIndexes.startIndex];\n      var lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);\n      var digitsOnly = /^[0-9]+$/.test(pastedValue);\n      var isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly;\n      if (isValidPastedValue) {\n        // Early return to let the paste update section, value\n        return;\n      }\n      if (lettersOnly || digitsOnly) {\n        // The pasted value correspond to a single section but not the expected type\n        // skip the modification\n        event.preventDefault();\n        return;\n      }\n    }\n    event.preventDefault();\n    updateValueFromValueStr(pastedValue);\n  });\n  var handleInputChange = useEventCallback(function (event) {\n    if (readOnly) {\n      return;\n    }\n    var valueStr = event.target.value;\n    var cleanValueStr = cleanString(valueStr);\n\n    // If no section is selected, we just try to parse the new value\n    // This line is mostly triggered by imperative code / application tests.\n    if (selectedSectionIndexes == null) {\n      updateValueFromValueStr(cleanValueStr);\n      return;\n    }\n    var keyPressed;\n    if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n      keyPressed = cleanValueStr;\n    } else {\n      var prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections, isRTL));\n      var startOfDiffIndex = -1;\n      var endOfDiffIndex = -1;\n      for (var i = 0; i < prevValueStr.length; i += 1) {\n        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {\n          startOfDiffIndex = i;\n        }\n        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {\n          endOfDiffIndex = i;\n        }\n      }\n      var activeSection = state.sections[selectedSectionIndexes.startIndex];\n      var hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;\n      if (hasDiffOutsideOfActiveSection) {\n        // TODO: Support if the new date is valid\n        return;\n      }\n\n      // The active section being selected, the browser has replaced its value with the key pressed by the user.\n      var activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;\n      keyPressed = cleanValueStr.slice(activeSection.start, activeSectionEndRelativeToNewValue);\n    }\n    if (isAndroid() && keyPressed.length === 0) {\n      setTempAndroidValueStr(valueStr);\n      return;\n    }\n    applyCharacterEditing({\n      keyPressed: keyPressed,\n      sectionIndex: selectedSectionIndexes.startIndex\n    });\n  });\n  var handleInputKeyDown = useEventCallback(function (event) {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select all\n      case event.key === 'a' && (event.ctrlKey || event.metaKey):\n        {\n          // prevent default to make sure that the next line \"select all\" while updating\n          // the internal state at the same time.\n          event.preventDefault();\n          _setSelectedSections('all');\n          break;\n        }\n\n      // Move selection to next section\n      case event.key === 'ArrowRight':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            _setSelectedSections(sectionOrder.startIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            _setSelectedSections(selectedSectionIndexes.endIndex);\n          } else {\n            var nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;\n            if (nextSectionIndex !== null) {\n              _setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Move selection to previous section\n      case event.key === 'ArrowLeft':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            _setSelectedSections(sectionOrder.endIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            _setSelectedSections(selectedSectionIndexes.startIndex);\n          } else {\n            var _nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;\n            if (_nextSectionIndex !== null) {\n              _setSelectedSections(_nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Reset the value of the selected section\n      case ['Backspace', 'Delete'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly) {\n            break;\n          }\n          if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n            clearValue();\n          } else {\n            clearActiveSection();\n          }\n          resetCharacterQuery();\n          break;\n        }\n\n      // Increment / decrement the selected section value\n      case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly || selectedSectionIndexes == null) {\n            break;\n          }\n          var activeSection = state.sections[selectedSectionIndexes.startIndex];\n          var activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n          var newSectionValue = adjustSectionValue(utils, activeSection, event.key, sectionsValueBoundaries, activeDateManager.date);\n          updateSectionValue({\n            activeSection: activeSection,\n            newSectionValue: newSectionValue,\n            shouldGoToNextSection: false\n          });\n          break;\n        }\n    }\n  });\n  useEnhancedEffect(function () {\n    if (selectedSectionIndexes == null) {\n      if (inputRef.current.scrollLeft) {\n        // Ensure that input content is not marked as selected.\n        // setting selection range to 0 causes issues in Safari.\n        // https://bugs.webkit.org/show_bug.cgi?id=224425\n        inputRef.current.scrollLeft = 0;\n      }\n      return;\n    }\n    var firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];\n    var lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];\n    var selectionStart = firstSelectedSection.startInInput;\n    var selectionEnd = lastSelectedSection.endInInput;\n    if (selectedSectionIndexes.shouldSelectBoundarySelectors) {\n      selectionStart -= firstSelectedSection.startSeparator.length;\n      selectionEnd += lastSelectedSection.endSeparator.length;\n    }\n    if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {\n      // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321\n      var currentScrollTop = inputRef.current.scrollTop;\n      inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n      // Even reading this variable seems to do the trick, but also setting it just to make use of it\n      inputRef.current.scrollTop = currentScrollTop;\n    }\n  });\n  var validationError = useValidation(_extends({}, internalProps, {\n    value: state.value\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  var inputError = React.useMemo(function () {\n    // only override when `error` is undefined.\n    // in case of multi input fields, the `error` value is provided externally and will always be defined.\n    if (error !== undefined) {\n      return error;\n    }\n    return valueManager.hasError(validationError);\n  }, [valueManager, validationError, error]);\n  React.useEffect(function () {\n    // Select the right section when focused on mount (`autoFocus = true` on the input)\n    if (inputRef.current && inputRef.current === document.activeElement) {\n      _setSelectedSections('all');\n    }\n    return function () {\n      return window.clearTimeout(focusTimeoutRef.current);\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // If `state.tempValueStrAndroid` is still defined when running `useEffect`,\n  // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.\n  // This causes a small flickering on Android,\n  // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.\n  React.useEffect(function () {\n    if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {\n      resetCharacterQuery();\n      clearActiveSection();\n    }\n  }, [state.tempValueStrAndroid]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  var valueStr = React.useMemo(function () {\n    var _state$tempValueStrAn;\n    return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections, isRTL);\n  }, [state.sections, fieldValueManager, state.tempValueStrAndroid, isRTL]);\n  var inputMode = React.useMemo(function () {\n    if (selectedSectionIndexes == null) {\n      return 'text';\n    }\n    if (state.sections[selectedSectionIndexes.startIndex].contentType === 'letter') {\n      return 'text';\n    }\n    return 'tel';\n  }, [selectedSectionIndexes, state.sections]);\n  var inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);\n  var shouldShowPlaceholder = !inputHasFocus && valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);\n  React.useImperativeHandle(unstableFieldRef, function () {\n    return {\n      getSections: function getSections() {\n        return state.sections;\n      },\n      getActiveSectionIndex: function getActiveSectionIndex() {\n        var _selectionStart2, _selectionEnd;\n        var browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;\n        var browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;\n        if (browserStartIndex === 0 && browserEndIndex === 0) {\n          return null;\n        }\n        var nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n        : state.sections.findIndex(function (section) {\n          return section.startInInput - section.startSeparator.length > browserStartIndex;\n        });\n        return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n      },\n      setSelectedSections: function setSelectedSections(activeSectionIndex) {\n        return _setSelectedSections(activeSectionIndex);\n      }\n    };\n  });\n  return _extends({\n    placeholder: placeholder,\n    autoComplete: 'off'\n  }, otherForwardedProps, {\n    value: shouldShowPlaceholder ? '' : valueStr,\n    inputMode: inputMode,\n    readOnly: readOnly,\n    onClick: handleInputClick,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onPaste: handleInputPaste,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    onMouseUp: handleInputMouseUp,\n    error: inputError,\n    ref: handleRef\n  });\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","React","useEnhancedEffect","useEventCallback","useForkRef","useTheme","useValidation","useUtils","adjustSectionValue","isAndroid","cleanString","getSectionOrder","useFieldState","useFieldCharacterEditing","getActiveElement","useField","params","utils","_useFieldState","state","selectedSectionIndexes","setSelectedSections","clearValue","clearActiveSection","updateSectionValue","updateValueFromValueStr","setTempAndroidValueStr","sectionsValueBoundaries","placeholder","_useFieldCharacterEdi","sections","applyCharacterEditing","resetCharacterQuery","inputRefProp","inputRef","internalProps","_params$internalProps","_params$internalProps2","readOnly","unstableFieldRef","_params$forwardedProp","forwardedProps","onClick","onKeyDown","onFocus","onBlur","onMouseUp","onPaste","error","fieldValueManager","valueManager","validator","otherForwardedProps","useRef","handleRef","focusTimeoutRef","undefined","theme","isRTL","direction","sectionOrder","useMemo","syncSelectionFromDOM","_selectionStart","browserStartIndex","current","selectionStart","nextSectionIndex","startInInput","findIndex","section","startSeparator","length","sectionIndex","handleInputClick","apply","arguments","handleInputMouseUp","event","preventDefault","handleInputFocus","input","clearTimeout","setTimeout","value","Number","selectionEnd","handleInputBlur","handleInputPaste","pastedValue","clipboardData","getData","startIndex","endIndex","activeSection","lettersOnly","test","digitsOnly","isValidPastedValue","contentType","handleInputChange","valueStr","target","cleanValueStr","keyPressed","prevValueStr","getValueStrFromSections","startOfDiffIndex","endOfDiffIndex","i","hasDiffOutsideOfActiveSection","start","end","activeSectionEndRelativeToNewValue","endSeparator","slice","handleInputKeyDown","key","ctrlKey","metaKey","neighbors","rightIndex","leftIndex","includes","activeDateManager","getActiveDateManager","newSectionValue","date","shouldGoToNextSection","scrollLeft","firstSelectedSection","lastSelectedSection","endInInput","shouldSelectBoundarySelectors","currentScrollTop","scrollTop","setSelectionRange","validationError","isSameError","defaultErrorState","inputError","hasError","useEffect","document","activeElement","window","tempValueStrAndroid","_state$tempValueStrAn","inputMode","inputHasFocus","shouldShowPlaceholder","areValuesEqual","emptyValue","useImperativeHandle","getSections","getActiveSectionIndex","_selectionStart2","_selectionEnd","browserEndIndex","activeSectionIndex","autoComplete","onChange","ref"],"sources":["/home/yasha/Desktop/Clarity_Plus_Package-Frontend-/node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onClick\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onMouseUp\", \"onPaste\", \"error\"];\nimport * as React from 'react';\nimport useEnhancedEffect from '@mui/utils/useEnhancedEffect';\nimport useEventCallback from '@mui/utils/useEventCallback';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTheme } from '@mui/material/styles';\nimport { useValidation } from '../validation/useValidation';\nimport { useUtils } from '../useUtils';\nimport { adjustSectionValue, isAndroid, cleanString, getSectionOrder } from './useField.utils';\nimport { useFieldState } from './useFieldState';\nimport { useFieldCharacterEditing } from './useFieldCharacterEditing';\nimport { getActiveElement } from '../../utils/utils';\nexport const useField = params => {\n  const utils = useUtils();\n  const {\n    state,\n    selectedSectionIndexes,\n    setSelectedSections,\n    clearValue,\n    clearActiveSection,\n    updateSectionValue,\n    updateValueFromValueStr,\n    setTempAndroidValueStr,\n    sectionsValueBoundaries,\n    placeholder\n  } = useFieldState(params);\n  const {\n    applyCharacterEditing,\n    resetCharacterQuery\n  } = useFieldCharacterEditing({\n    sections: state.sections,\n    updateSectionValue,\n    sectionsValueBoundaries,\n    setTempAndroidValueStr\n  });\n  const {\n      inputRef: inputRefProp,\n      internalProps,\n      internalProps: {\n        readOnly = false,\n        unstableFieldRef\n      },\n      forwardedProps: {\n        onClick,\n        onKeyDown,\n        onFocus,\n        onBlur,\n        onMouseUp,\n        onPaste,\n        error\n      },\n      fieldValueManager,\n      valueManager,\n      validator\n    } = params,\n    otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded);\n  const inputRef = React.useRef(null);\n  const handleRef = useForkRef(inputRefProp, inputRef);\n  const focusTimeoutRef = React.useRef(undefined);\n  const theme = useTheme();\n  const isRTL = theme.direction === 'rtl';\n  const sectionOrder = React.useMemo(() => getSectionOrder(state.sections, isRTL), [state.sections, isRTL]);\n  const syncSelectionFromDOM = () => {\n    var _selectionStart;\n    if (readOnly) {\n      setSelectedSections(null);\n      return;\n    }\n    const browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;\n    const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n    : state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n    const sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    setSelectedSections(sectionIndex);\n  };\n  const handleInputClick = useEventCallback((...args) => {\n    onClick == null ? void 0 : onClick(...args);\n    syncSelectionFromDOM();\n  });\n  const handleInputMouseUp = useEventCallback(event => {\n    onMouseUp == null ? void 0 : onMouseUp(event);\n\n    // Without this, the browser will remove the selected when clicking inside an already-selected section.\n    event.preventDefault();\n  });\n  const handleInputFocus = useEventCallback((...args) => {\n    onFocus == null ? void 0 : onFocus(...args);\n    // The ref is guaranteed to be resolved at this point.\n    const input = inputRef.current;\n    clearTimeout(focusTimeoutRef.current);\n    focusTimeoutRef.current = setTimeout(() => {\n      // The ref changed, the component got remounted, the focus event is no longer relevant.\n      if (!input || input !== inputRef.current) {\n        return;\n      }\n      if (selectedSectionIndexes != null || readOnly) {\n        return;\n      }\n      if (\n      // avoid selecting all sections when focusing empty field without value\n      input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {\n        setSelectedSections('all');\n      } else {\n        syncSelectionFromDOM();\n      }\n    });\n  });\n  const handleInputBlur = useEventCallback((...args) => {\n    onBlur == null ? void 0 : onBlur(...args);\n    setSelectedSections(null);\n  });\n  const handleInputPaste = useEventCallback(event => {\n    onPaste == null ? void 0 : onPaste(event);\n    if (readOnly) {\n      event.preventDefault();\n      return;\n    }\n    const pastedValue = event.clipboardData.getData('text');\n    if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {\n      const activeSection = state.sections[selectedSectionIndexes.startIndex];\n      const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);\n      const digitsOnly = /^[0-9]+$/.test(pastedValue);\n      const isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly;\n      if (isValidPastedValue) {\n        // Early return to let the paste update section, value\n        return;\n      }\n      if (lettersOnly || digitsOnly) {\n        // The pasted value correspond to a single section but not the expected type\n        // skip the modification\n        event.preventDefault();\n        return;\n      }\n    }\n    event.preventDefault();\n    updateValueFromValueStr(pastedValue);\n  });\n  const handleInputChange = useEventCallback(event => {\n    if (readOnly) {\n      return;\n    }\n    const valueStr = event.target.value;\n    const cleanValueStr = cleanString(valueStr);\n\n    // If no section is selected, we just try to parse the new value\n    // This line is mostly triggered by imperative code / application tests.\n    if (selectedSectionIndexes == null) {\n      updateValueFromValueStr(cleanValueStr);\n      return;\n    }\n    let keyPressed;\n    if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n      keyPressed = cleanValueStr;\n    } else {\n      const prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections, isRTL));\n      let startOfDiffIndex = -1;\n      let endOfDiffIndex = -1;\n      for (let i = 0; i < prevValueStr.length; i += 1) {\n        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {\n          startOfDiffIndex = i;\n        }\n        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {\n          endOfDiffIndex = i;\n        }\n      }\n      const activeSection = state.sections[selectedSectionIndexes.startIndex];\n      const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;\n      if (hasDiffOutsideOfActiveSection) {\n        // TODO: Support if the new date is valid\n        return;\n      }\n\n      // The active section being selected, the browser has replaced its value with the key pressed by the user.\n      const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;\n      keyPressed = cleanValueStr.slice(activeSection.start, activeSectionEndRelativeToNewValue);\n    }\n    if (isAndroid() && keyPressed.length === 0) {\n      setTempAndroidValueStr(valueStr);\n      return;\n    }\n    applyCharacterEditing({\n      keyPressed,\n      sectionIndex: selectedSectionIndexes.startIndex\n    });\n  });\n  const handleInputKeyDown = useEventCallback(event => {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    // eslint-disable-next-line default-case\n    switch (true) {\n      // Select all\n      case event.key === 'a' && (event.ctrlKey || event.metaKey):\n        {\n          // prevent default to make sure that the next line \"select all\" while updating\n          // the internal state at the same time.\n          event.preventDefault();\n          setSelectedSections('all');\n          break;\n        }\n\n      // Move selection to next section\n      case event.key === 'ArrowRight':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            setSelectedSections(sectionOrder.startIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            setSelectedSections(selectedSectionIndexes.endIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Move selection to previous section\n      case event.key === 'ArrowLeft':\n        {\n          event.preventDefault();\n          if (selectedSectionIndexes == null) {\n            setSelectedSections(sectionOrder.endIndex);\n          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {\n            setSelectedSections(selectedSectionIndexes.startIndex);\n          } else {\n            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;\n            if (nextSectionIndex !== null) {\n              setSelectedSections(nextSectionIndex);\n            }\n          }\n          break;\n        }\n\n      // Reset the value of the selected section\n      case ['Backspace', 'Delete'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly) {\n            break;\n          }\n          if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {\n            clearValue();\n          } else {\n            clearActiveSection();\n          }\n          resetCharacterQuery();\n          break;\n        }\n\n      // Increment / decrement the selected section value\n      case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):\n        {\n          event.preventDefault();\n          if (readOnly || selectedSectionIndexes == null) {\n            break;\n          }\n          const activeSection = state.sections[selectedSectionIndexes.startIndex];\n          const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);\n          const newSectionValue = adjustSectionValue(utils, activeSection, event.key, sectionsValueBoundaries, activeDateManager.date);\n          updateSectionValue({\n            activeSection,\n            newSectionValue,\n            shouldGoToNextSection: false\n          });\n          break;\n        }\n    }\n  });\n  useEnhancedEffect(() => {\n    if (selectedSectionIndexes == null) {\n      if (inputRef.current.scrollLeft) {\n        // Ensure that input content is not marked as selected.\n        // setting selection range to 0 causes issues in Safari.\n        // https://bugs.webkit.org/show_bug.cgi?id=224425\n        inputRef.current.scrollLeft = 0;\n      }\n      return;\n    }\n    const firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];\n    const lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];\n    let selectionStart = firstSelectedSection.startInInput;\n    let selectionEnd = lastSelectedSection.endInInput;\n    if (selectedSectionIndexes.shouldSelectBoundarySelectors) {\n      selectionStart -= firstSelectedSection.startSeparator.length;\n      selectionEnd += lastSelectedSection.endSeparator.length;\n    }\n    if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {\n      // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321\n      const currentScrollTop = inputRef.current.scrollTop;\n      inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n      // Even reading this variable seems to do the trick, but also setting it just to make use of it\n      inputRef.current.scrollTop = currentScrollTop;\n    }\n  });\n  const validationError = useValidation(_extends({}, internalProps, {\n    value: state.value\n  }), validator, valueManager.isSameError, valueManager.defaultErrorState);\n  const inputError = React.useMemo(() => {\n    // only override when `error` is undefined.\n    // in case of multi input fields, the `error` value is provided externally and will always be defined.\n    if (error !== undefined) {\n      return error;\n    }\n    return valueManager.hasError(validationError);\n  }, [valueManager, validationError, error]);\n  React.useEffect(() => {\n    // Select the right section when focused on mount (`autoFocus = true` on the input)\n    if (inputRef.current && inputRef.current === document.activeElement) {\n      setSelectedSections('all');\n    }\n    return () => window.clearTimeout(focusTimeoutRef.current);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // If `state.tempValueStrAndroid` is still defined when running `useEffect`,\n  // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.\n  // This causes a small flickering on Android,\n  // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.\n  React.useEffect(() => {\n    if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {\n      resetCharacterQuery();\n      clearActiveSection();\n    }\n  }, [state.tempValueStrAndroid]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const valueStr = React.useMemo(() => {\n    var _state$tempValueStrAn;\n    return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections, isRTL);\n  }, [state.sections, fieldValueManager, state.tempValueStrAndroid, isRTL]);\n  const inputMode = React.useMemo(() => {\n    if (selectedSectionIndexes == null) {\n      return 'text';\n    }\n    if (state.sections[selectedSectionIndexes.startIndex].contentType === 'letter') {\n      return 'text';\n    }\n    return 'tel';\n  }, [selectedSectionIndexes, state.sections]);\n  const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);\n  const shouldShowPlaceholder = !inputHasFocus && valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);\n  React.useImperativeHandle(unstableFieldRef, () => ({\n    getSections: () => state.sections,\n    getActiveSectionIndex: () => {\n      var _selectionStart2, _selectionEnd;\n      const browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;\n      const browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;\n      if (browserStartIndex === 0 && browserEndIndex === 0) {\n        return null;\n      }\n      const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.\n      : state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);\n      return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;\n    },\n    setSelectedSections: activeSectionIndex => setSelectedSections(activeSectionIndex)\n  }));\n  return _extends({\n    placeholder,\n    autoComplete: 'off'\n  }, otherForwardedProps, {\n    value: shouldShowPlaceholder ? '' : valueStr,\n    inputMode,\n    readOnly,\n    onClick: handleInputClick,\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    onPaste: handleInputPaste,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    onMouseUp: handleInputMouseUp,\n    error: inputError,\n    ref: handleRef\n  });\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}