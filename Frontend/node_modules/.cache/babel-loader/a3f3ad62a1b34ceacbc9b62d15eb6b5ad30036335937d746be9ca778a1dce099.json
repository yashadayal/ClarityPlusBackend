{"ast":null,"code":"import { areDatesEqual, replaceInvalidDateByNull } from './date-utils';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections } from '../hooks/useField/useField.utils';\nexport const singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: (utils, valueType) => valueType === 'date' ? utils.startOfDay(utils.date()) : utils.date(),\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: areDatesEqual,\n  isSameError: (a, b) => a === b,\n  hasError: error => error != null,\n  defaultErrorState: null\n};\nexport const singleItemFieldValueManager = {\n  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,\n  getSectionsFromValue: (utils, date, prevSections, isRTL, getSectionsFromDate) => {\n    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n    return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);\n  },\n  getValueStrFromSections: createDateStrForInputFromSections,\n  getActiveDateManager: (utils, state) => ({\n    date: state.value,\n    referenceDate: state.referenceValue,\n    getSections: sections => sections,\n    getNewValuesFromNewActiveDate: newActiveDate => ({\n      value: newActiveDate,\n      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n    })\n  }),\n  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue)\n};","map":{"version":3,"names":["areDatesEqual","replaceInvalidDateByNull","addPositionPropertiesToSections","createDateStrForInputFromSections","singleItemValueManager","emptyValue","getTodayValue","utils","valueType","startOfDay","date","cleanValue","areValuesEqual","isSameError","a","b","hasError","error","defaultErrorState","singleItemFieldValueManager","updateReferenceValue","value","prevReferenceValue","isValid","getSectionsFromValue","prevSections","isRTL","getSectionsFromDate","shouldReUsePrevDateSections","getValueStrFromSections","getActiveDateManager","state","referenceDate","referenceValue","getSections","sections","getNewValuesFromNewActiveDate","newActiveDate","parseValueStr","valueStr","parseDate","trim"],"sources":["/home/hp/Desktop/ClarityPlusPackage1/ClarityPlusPackage/Frontend/node_modules/@mui/x-date-pickers/internals/utils/valueManagers.js"],"sourcesContent":["import { areDatesEqual, replaceInvalidDateByNull } from './date-utils';\nimport { addPositionPropertiesToSections, createDateStrForInputFromSections } from '../hooks/useField/useField.utils';\nexport const singleItemValueManager = {\n  emptyValue: null,\n  getTodayValue: (utils, valueType) => valueType === 'date' ? utils.startOfDay(utils.date()) : utils.date(),\n  cleanValue: replaceInvalidDateByNull,\n  areValuesEqual: areDatesEqual,\n  isSameError: (a, b) => a === b,\n  hasError: error => error != null,\n  defaultErrorState: null\n};\nexport const singleItemFieldValueManager = {\n  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,\n  getSectionsFromValue: (utils, date, prevSections, isRTL, getSectionsFromDate) => {\n    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;\n    if (shouldReUsePrevDateSections) {\n      return prevSections;\n    }\n    return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);\n  },\n  getValueStrFromSections: createDateStrForInputFromSections,\n  getActiveDateManager: (utils, state) => ({\n    date: state.value,\n    referenceDate: state.referenceValue,\n    getSections: sections => sections,\n    getNewValuesFromNewActiveDate: newActiveDate => ({\n      value: newActiveDate,\n      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate\n    })\n  }),\n  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue)\n};"],"mappings":"AAAA,SAASA,aAAa,EAAEC,wBAAwB,QAAQ,cAAc;AACtE,SAASC,+BAA+B,EAAEC,iCAAiC,QAAQ,kCAAkC;AACrH,OAAO,MAAMC,sBAAsB,GAAG;EACpCC,UAAU,EAAE,IAAI;EAChBC,aAAa,EAAEA,CAACC,KAAK,EAAEC,SAAS,KAAKA,SAAS,KAAK,MAAM,GAAGD,KAAK,CAACE,UAAU,CAACF,KAAK,CAACG,IAAI,EAAE,CAAC,GAAGH,KAAK,CAACG,IAAI,EAAE;EACzGC,UAAU,EAAEV,wBAAwB;EACpCW,cAAc,EAAEZ,aAAa;EAC7Ba,WAAW,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,KAAKC,CAAC;EAC9BC,QAAQ,EAAEC,KAAK,IAAIA,KAAK,IAAI,IAAI;EAChCC,iBAAiB,EAAE;AACrB,CAAC;AACD,OAAO,MAAMC,2BAA2B,GAAG;EACzCC,oBAAoB,EAAEA,CAACb,KAAK,EAAEc,KAAK,EAAEC,kBAAkB,KAAKD,KAAK,IAAI,IAAI,IAAI,CAACd,KAAK,CAACgB,OAAO,CAACF,KAAK,CAAC,GAAGC,kBAAkB,GAAGD,KAAK;EAC/HG,oBAAoB,EAAEA,CAACjB,KAAK,EAAEG,IAAI,EAAEe,YAAY,EAAEC,KAAK,EAAEC,mBAAmB,KAAK;IAC/E,MAAMC,2BAA2B,GAAG,CAACrB,KAAK,CAACgB,OAAO,CAACb,IAAI,CAAC,IAAI,CAAC,CAACe,YAAY;IAC1E,IAAIG,2BAA2B,EAAE;MAC/B,OAAOH,YAAY;IACrB;IACA,OAAOvB,+BAA+B,CAACyB,mBAAmB,CAACjB,IAAI,CAAC,EAAEgB,KAAK,CAAC;EAC1E,CAAC;EACDG,uBAAuB,EAAE1B,iCAAiC;EAC1D2B,oBAAoB,EAAEA,CAACvB,KAAK,EAAEwB,KAAK,MAAM;IACvCrB,IAAI,EAAEqB,KAAK,CAACV,KAAK;IACjBW,aAAa,EAAED,KAAK,CAACE,cAAc;IACnCC,WAAW,EAAEC,QAAQ,IAAIA,QAAQ;IACjCC,6BAA6B,EAAEC,aAAa,KAAK;MAC/ChB,KAAK,EAAEgB,aAAa;MACpBJ,cAAc,EAAEI,aAAa,IAAI,IAAI,IAAI,CAAC9B,KAAK,CAACgB,OAAO,CAACc,aAAa,CAAC,GAAGN,KAAK,CAACE,cAAc,GAAGI;IAClG,CAAC;EACH,CAAC,CAAC;EACFC,aAAa,EAAEA,CAACC,QAAQ,EAAEN,cAAc,EAAEO,SAAS,KAAKA,SAAS,CAACD,QAAQ,CAACE,IAAI,EAAE,EAAER,cAAc;AACnG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}